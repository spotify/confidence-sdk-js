// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.3
// source: confidence/flags/types/v1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'confidence.flags.types.v1';

/**
 * Schema for the value of a flag.
 *
 * The value of a flag is always a struct with one or more nested fields.
 * Example of a struct schema with two fields, `color` (a string) and `len` (an int):
 *
 * ```
 * {
 *   "schema": {
 *     "color": {
 *       "stringSchema": {}
 *     },
 *     "len": {
 *       "intSchema": {}
 *     }
 *   }
 * }
 * ```
 */
export interface FlagSchema {
  /** Schema if this is a struct */
  structSchema?: FlagSchema_StructFlagSchema | undefined;
  /** Schema if this is a list */
  listSchema?: FlagSchema_ListFlagSchema | undefined;
  /** Schema if this is an int */
  intSchema?: FlagSchema_IntFlagSchema | undefined;
  /** Schema if this is a double */
  doubleSchema?: FlagSchema_DoubleFlagSchema | undefined;
  /** Schema if this is a string */
  stringSchema?: FlagSchema_StringFlagSchema | undefined;
  /** Schema if this is a bool */
  boolSchema?: FlagSchema_BoolFlagSchema | undefined;
}

/**
 * A schema of nested fields. The length of the field name is limited to
 * 32 characters and can only contain alphanumeric characters, hyphens and
 * underscores. The number of fields in a struct is limited to 64.
 * Structs can not be nested more than four (4) levels.
 */
export interface FlagSchema_StructFlagSchema {
  /** Map of field name to the schema for the field */
  schema: { [key: string]: FlagSchema };
}

export interface FlagSchema_StructFlagSchema_SchemaEntry {
  key: string;
  value: FlagSchema | undefined;
}

/** A number that has a decimal place. */
export interface FlagSchema_DoubleFlagSchema {}

/** A whole number without a decimal point. */
export interface FlagSchema_IntFlagSchema {}

/** A string. The length is limited to 250 characters. */
export interface FlagSchema_StringFlagSchema {}

/** A boolean: true or false. */
export interface FlagSchema_BoolFlagSchema {}

/**
 * A list of values. The values have the same data types which
 * is defined by  `element_schema`.
 */
export interface FlagSchema_ListFlagSchema {
  /** The schema for the elements in the list */
  elementSchema: FlagSchema | undefined;
}

function createBaseFlagSchema(): FlagSchema {
  return {
    structSchema: undefined,
    listSchema: undefined,
    intSchema: undefined,
    doubleSchema: undefined,
    stringSchema: undefined,
    boolSchema: undefined,
  };
}

export const FlagSchema: MessageFns<FlagSchema> = {
  encode(message: FlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structSchema !== undefined) {
      FlagSchema_StructFlagSchema.encode(message.structSchema, writer.uint32(10).fork()).join();
    }
    if (message.listSchema !== undefined) {
      FlagSchema_ListFlagSchema.encode(message.listSchema, writer.uint32(18).fork()).join();
    }
    if (message.intSchema !== undefined) {
      FlagSchema_IntFlagSchema.encode(message.intSchema, writer.uint32(26).fork()).join();
    }
    if (message.doubleSchema !== undefined) {
      FlagSchema_DoubleFlagSchema.encode(message.doubleSchema, writer.uint32(34).fork()).join();
    }
    if (message.stringSchema !== undefined) {
      FlagSchema_StringFlagSchema.encode(message.stringSchema, writer.uint32(42).fork()).join();
    }
    if (message.boolSchema !== undefined) {
      FlagSchema_BoolFlagSchema.encode(message.boolSchema, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structSchema = FlagSchema_StructFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.listSchema = FlagSchema_ListFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.intSchema = FlagSchema_IntFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.doubleSchema = FlagSchema_DoubleFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stringSchema = FlagSchema_StringFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.boolSchema = FlagSchema_BoolFlagSchema.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagSchema {
    return {
      structSchema: isSet(object.structSchema) ? FlagSchema_StructFlagSchema.fromJSON(object.structSchema) : undefined,
      listSchema: isSet(object.listSchema) ? FlagSchema_ListFlagSchema.fromJSON(object.listSchema) : undefined,
      intSchema: isSet(object.intSchema) ? FlagSchema_IntFlagSchema.fromJSON(object.intSchema) : undefined,
      doubleSchema: isSet(object.doubleSchema) ? FlagSchema_DoubleFlagSchema.fromJSON(object.doubleSchema) : undefined,
      stringSchema: isSet(object.stringSchema) ? FlagSchema_StringFlagSchema.fromJSON(object.stringSchema) : undefined,
      boolSchema: isSet(object.boolSchema) ? FlagSchema_BoolFlagSchema.fromJSON(object.boolSchema) : undefined,
    };
  },

  toJSON(message: FlagSchema): unknown {
    const obj: any = {};
    if (message.structSchema !== undefined) {
      obj.structSchema = FlagSchema_StructFlagSchema.toJSON(message.structSchema);
    }
    if (message.listSchema !== undefined) {
      obj.listSchema = FlagSchema_ListFlagSchema.toJSON(message.listSchema);
    }
    if (message.intSchema !== undefined) {
      obj.intSchema = FlagSchema_IntFlagSchema.toJSON(message.intSchema);
    }
    if (message.doubleSchema !== undefined) {
      obj.doubleSchema = FlagSchema_DoubleFlagSchema.toJSON(message.doubleSchema);
    }
    if (message.stringSchema !== undefined) {
      obj.stringSchema = FlagSchema_StringFlagSchema.toJSON(message.stringSchema);
    }
    if (message.boolSchema !== undefined) {
      obj.boolSchema = FlagSchema_BoolFlagSchema.toJSON(message.boolSchema);
    }
    return obj;
  },
};

function createBaseFlagSchema_StructFlagSchema(): FlagSchema_StructFlagSchema {
  return { schema: {} };
}

export const FlagSchema_StructFlagSchema: MessageFns<FlagSchema_StructFlagSchema> = {
  encode(message: FlagSchema_StructFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.schema).forEach(([key, value]) => {
      FlagSchema_StructFlagSchema_SchemaEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_StructFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_StructFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = FlagSchema_StructFlagSchema_SchemaEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.schema[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagSchema_StructFlagSchema {
    return {
      schema: isObject(object.schema)
        ? Object.entries(object.schema).reduce<{ [key: string]: FlagSchema }>((acc, [key, value]) => {
            acc[key] = FlagSchema.fromJSON(value);
            return acc;
          }, {})
        : {},
    };
  },

  toJSON(message: FlagSchema_StructFlagSchema): unknown {
    const obj: any = {};
    if (message.schema) {
      const entries = Object.entries(message.schema);
      if (entries.length > 0) {
        obj.schema = {};
        entries.forEach(([k, v]) => {
          obj.schema[k] = FlagSchema.toJSON(v);
        });
      }
    }
    return obj;
  },
};

function createBaseFlagSchema_StructFlagSchema_SchemaEntry(): FlagSchema_StructFlagSchema_SchemaEntry {
  return { key: '', value: undefined };
}

export const FlagSchema_StructFlagSchema_SchemaEntry: MessageFns<FlagSchema_StructFlagSchema_SchemaEntry> = {
  encode(message: FlagSchema_StructFlagSchema_SchemaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== '') {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      FlagSchema.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_StructFlagSchema_SchemaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_StructFlagSchema_SchemaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = FlagSchema.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagSchema_StructFlagSchema_SchemaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : '',
      value: isSet(object.value) ? FlagSchema.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FlagSchema_StructFlagSchema_SchemaEntry): unknown {
    const obj: any = {};
    if (message.key !== '') {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = FlagSchema.toJSON(message.value);
    }
    return obj;
  },
};

function createBaseFlagSchema_DoubleFlagSchema(): FlagSchema_DoubleFlagSchema {
  return {};
}

export const FlagSchema_DoubleFlagSchema: MessageFns<FlagSchema_DoubleFlagSchema> = {
  encode(_: FlagSchema_DoubleFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_DoubleFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_DoubleFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlagSchema_DoubleFlagSchema {
    return {};
  },

  toJSON(_: FlagSchema_DoubleFlagSchema): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseFlagSchema_IntFlagSchema(): FlagSchema_IntFlagSchema {
  return {};
}

export const FlagSchema_IntFlagSchema: MessageFns<FlagSchema_IntFlagSchema> = {
  encode(_: FlagSchema_IntFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_IntFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_IntFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlagSchema_IntFlagSchema {
    return {};
  },

  toJSON(_: FlagSchema_IntFlagSchema): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseFlagSchema_StringFlagSchema(): FlagSchema_StringFlagSchema {
  return {};
}

export const FlagSchema_StringFlagSchema: MessageFns<FlagSchema_StringFlagSchema> = {
  encode(_: FlagSchema_StringFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_StringFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_StringFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlagSchema_StringFlagSchema {
    return {};
  },

  toJSON(_: FlagSchema_StringFlagSchema): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseFlagSchema_BoolFlagSchema(): FlagSchema_BoolFlagSchema {
  return {};
}

export const FlagSchema_BoolFlagSchema: MessageFns<FlagSchema_BoolFlagSchema> = {
  encode(_: FlagSchema_BoolFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_BoolFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_BoolFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FlagSchema_BoolFlagSchema {
    return {};
  },

  toJSON(_: FlagSchema_BoolFlagSchema): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseFlagSchema_ListFlagSchema(): FlagSchema_ListFlagSchema {
  return { elementSchema: undefined };
}

export const FlagSchema_ListFlagSchema: MessageFns<FlagSchema_ListFlagSchema> = {
  encode(message: FlagSchema_ListFlagSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.elementSchema !== undefined) {
      FlagSchema.encode(message.elementSchema, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FlagSchema_ListFlagSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFlagSchema_ListFlagSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.elementSchema = FlagSchema.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FlagSchema_ListFlagSchema {
    return { elementSchema: isSet(object.elementSchema) ? FlagSchema.fromJSON(object.elementSchema) : undefined };
  },

  toJSON(message: FlagSchema_ListFlagSchema): unknown {
    const obj: any = {};
    if (message.elementSchema !== undefined) {
      obj.elementSchema = FlagSchema.toJSON(message.elementSchema);
    }
    return obj;
  },
};

function isObject(value: any): boolean {
  return typeof value === 'object' && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
