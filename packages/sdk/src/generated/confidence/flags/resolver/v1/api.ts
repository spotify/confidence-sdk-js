// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.3
// source: confidence/flags/resolver/v1/api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { Struct } from '../../../../google/protobuf/struct';
import { Timestamp } from '../../../../google/protobuf/timestamp';
import { FlagSchema_StructFlagSchema } from '../../types/v1/types';
import { ResolveReason, resolveReasonFromJSON, resolveReasonToJSON, Sdk } from './types';

export const protobufPackage = 'confidence.flags.resolver.v1';

export interface ResolveFlagsRequest {
  /**
   * If non-empty, the specific flags are resolved, otherwise all flags
   * available to the client will be resolved.
   */
  flags: string[];
  /**
   * An object that contains data used in the flag resolve. For example,
   * the targeting key e.g. the id of the randomization unit, other attributes
   * like country or version that are used for targeting.
   */
  evaluationContext: { [key: string]: any } | undefined;
  /**
   * Credentials for the client. It is used to identify the client and find
   * the flags that are available to it.
   */
  clientSecret: string;
  /**
   * Determines whether the flags should be applied directly as part of the
   * resolve, or delayed until `ApplyFlag` is called. A flag is typically
   * applied when it is used, if this occurs much later than the resolve, then
   * `apply` should likely be set to false.
   */
  apply: boolean;
  /** Information about the SDK used to initiate the request. */
  sdk: Sdk | undefined;
}

export interface ResolveFlagsResponse {
  /**
   * The list of all flags that could be resolved. Note: if any flag was
   * archived it will not be included in this list.
   */
  resolvedFlags: ResolvedFlag[];
  /**
   * An opaque token that is used when `apply` is set to false in `ResolveFlags`.
   * When `apply` is set to false, the token must be passed to `ApplyFlags`.
   */
  resolveToken: Uint8Array;
  /** Unique identifier for this particular resolve request. */
  resolveId: string;
}

export interface ApplyFlagsRequest {
  /** The flags to apply and information about when they were applied. */
  flags: AppliedFlag[];
  /** Credentials for the client. */
  clientSecret: string;
  /** An opaque token that was returned from `ResolveFlags`; it must be set. */
  resolveToken: Uint8Array;
  /**
   * The client time when the this request was sent, used for correcting
   * clock skew from the client.
   */
  sendTime: Date | undefined;
  /** Information about the SDK used to initiate the request. */
  sdk: Sdk | undefined;
}

export interface ApplyFlagsResponse {}

export interface AppliedFlag {
  /** The id of the flag that should be applied, has the format `flags/*`. */
  flag: string;
  /** The client time when the flag was applied. */
  applyTime: Date | undefined;
}

export interface ResolvedFlag {
  /** The id of the flag that as resolved. */
  flag: string;
  /** The id of the resolved variant has the format `flags/abc/variants/xyz`. */
  variant: string;
  /**
   * The value corresponding to the variant. It will always be a json object,
   * for example `{ "color": "red", "size": 12 }`.
   */
  value: { [key: string]: any } | undefined;
  /**
   * The schema of the value that was returned. For example:
   * ```
   * {
   *    "schema": {
   *      "color": { "stringSchema": {} },
   *      "size": { "intSchema": {} }
   *    }
   * }
   * ```
   */
  flagSchema: FlagSchema_StructFlagSchema | undefined;
  /** The reason to why the flag could be resolved or not. */
  reason: ResolveReason;
  /** Determines whether the flag should be applied in the clients */
  shouldApply: boolean;
}

function createBaseResolveFlagsRequest(): ResolveFlagsRequest {
  return { flags: [], evaluationContext: undefined, clientSecret: '', apply: false, sdk: undefined };
}

export const ResolveFlagsRequest: MessageFns<ResolveFlagsRequest> = {
  encode(message: ResolveFlagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      writer.uint32(10).string(v!);
    }
    if (message.evaluationContext !== undefined) {
      Struct.encode(Struct.wrap(message.evaluationContext), writer.uint32(18).fork()).join();
    }
    if (message.clientSecret !== '') {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.apply !== false) {
      writer.uint32(32).bool(message.apply);
    }
    if (message.sdk !== undefined) {
      Sdk.encode(message.sdk, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveFlagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveFlagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.evaluationContext = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.apply = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sdk = Sdk.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveFlagsRequest {
    return {
      flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => globalThis.String(e)) : [],
      evaluationContext: isObject(object.evaluationContext) ? object.evaluationContext : undefined,
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : '',
      apply: isSet(object.apply) ? globalThis.Boolean(object.apply) : false,
      sdk: isSet(object.sdk) ? Sdk.fromJSON(object.sdk) : undefined,
    };
  },

  toJSON(message: ResolveFlagsRequest): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags;
    }
    if (message.evaluationContext !== undefined) {
      obj.evaluationContext = message.evaluationContext;
    }
    if (message.clientSecret !== '') {
      obj.clientSecret = message.clientSecret;
    }
    if (message.apply !== false) {
      obj.apply = message.apply;
    }
    if (message.sdk !== undefined) {
      obj.sdk = Sdk.toJSON(message.sdk);
    }
    return obj;
  },
};

function createBaseResolveFlagsResponse(): ResolveFlagsResponse {
  return { resolvedFlags: [], resolveToken: new Uint8Array(0), resolveId: '' };
}

export const ResolveFlagsResponse: MessageFns<ResolveFlagsResponse> = {
  encode(message: ResolveFlagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resolvedFlags) {
      ResolvedFlag.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.resolveToken.length !== 0) {
      writer.uint32(18).bytes(message.resolveToken);
    }
    if (message.resolveId !== '') {
      writer.uint32(26).string(message.resolveId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveFlagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveFlagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resolvedFlags.push(ResolvedFlag.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resolveToken = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resolveId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveFlagsResponse {
    return {
      resolvedFlags: globalThis.Array.isArray(object?.resolvedFlags)
        ? object.resolvedFlags.map((e: any) => ResolvedFlag.fromJSON(e))
        : [],
      resolveToken: isSet(object.resolveToken) ? bytesFromBase64(object.resolveToken) : new Uint8Array(0),
      resolveId: isSet(object.resolveId) ? globalThis.String(object.resolveId) : '',
    };
  },

  toJSON(message: ResolveFlagsResponse): unknown {
    const obj: any = {};
    if (message.resolvedFlags?.length) {
      obj.resolvedFlags = message.resolvedFlags.map(e => ResolvedFlag.toJSON(e));
    }
    if (message.resolveToken.length !== 0) {
      obj.resolveToken = base64FromBytes(message.resolveToken);
    }
    if (message.resolveId !== '') {
      obj.resolveId = message.resolveId;
    }
    return obj;
  },
};

function createBaseApplyFlagsRequest(): ApplyFlagsRequest {
  return { flags: [], clientSecret: '', resolveToken: new Uint8Array(0), sendTime: undefined, sdk: undefined };
}

export const ApplyFlagsRequest: MessageFns<ApplyFlagsRequest> = {
  encode(message: ApplyFlagsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      AppliedFlag.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.clientSecret !== '') {
      writer.uint32(18).string(message.clientSecret);
    }
    if (message.resolveToken.length !== 0) {
      writer.uint32(26).bytes(message.resolveToken);
    }
    if (message.sendTime !== undefined) {
      Timestamp.encode(toTimestamp(message.sendTime), writer.uint32(34).fork()).join();
    }
    if (message.sdk !== undefined) {
      Sdk.encode(message.sdk, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyFlagsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyFlagsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(AppliedFlag.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resolveToken = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sendTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sdk = Sdk.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyFlagsRequest {
    return {
      flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => AppliedFlag.fromJSON(e)) : [],
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : '',
      resolveToken: isSet(object.resolveToken) ? bytesFromBase64(object.resolveToken) : new Uint8Array(0),
      sendTime: isSet(object.sendTime) ? fromJsonTimestamp(object.sendTime) : undefined,
      sdk: isSet(object.sdk) ? Sdk.fromJSON(object.sdk) : undefined,
    };
  },

  toJSON(message: ApplyFlagsRequest): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags.map(e => AppliedFlag.toJSON(e));
    }
    if (message.clientSecret !== '') {
      obj.clientSecret = message.clientSecret;
    }
    if (message.resolveToken.length !== 0) {
      obj.resolveToken = base64FromBytes(message.resolveToken);
    }
    if (message.sendTime !== undefined) {
      obj.sendTime = message.sendTime.toISOString();
    }
    if (message.sdk !== undefined) {
      obj.sdk = Sdk.toJSON(message.sdk);
    }
    return obj;
  },
};

function createBaseApplyFlagsResponse(): ApplyFlagsResponse {
  return {};
}

export const ApplyFlagsResponse: MessageFns<ApplyFlagsResponse> = {
  encode(_: ApplyFlagsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyFlagsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyFlagsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ApplyFlagsResponse {
    return {};
  },

  toJSON(_: ApplyFlagsResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseAppliedFlag(): AppliedFlag {
  return { flag: '', applyTime: undefined };
}

export const AppliedFlag: MessageFns<AppliedFlag> = {
  encode(message: AppliedFlag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== '') {
      writer.uint32(10).string(message.flag);
    }
    if (message.applyTime !== undefined) {
      Timestamp.encode(toTimestamp(message.applyTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppliedFlag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppliedFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.applyTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppliedFlag {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : '',
      applyTime: isSet(object.applyTime) ? fromJsonTimestamp(object.applyTime) : undefined,
    };
  },

  toJSON(message: AppliedFlag): unknown {
    const obj: any = {};
    if (message.flag !== '') {
      obj.flag = message.flag;
    }
    if (message.applyTime !== undefined) {
      obj.applyTime = message.applyTime.toISOString();
    }
    return obj;
  },
};

function createBaseResolvedFlag(): ResolvedFlag {
  return { flag: '', variant: '', value: undefined, flagSchema: undefined, reason: 0, shouldApply: false };
}

export const ResolvedFlag: MessageFns<ResolvedFlag> = {
  encode(message: ResolvedFlag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flag !== '') {
      writer.uint32(10).string(message.flag);
    }
    if (message.variant !== '') {
      writer.uint32(18).string(message.variant);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(26).fork()).join();
    }
    if (message.flagSchema !== undefined) {
      FlagSchema_StructFlagSchema.encode(message.flagSchema, writer.uint32(34).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(40).int32(message.reason);
    }
    if (message.shouldApply !== false) {
      writer.uint32(48).bool(message.shouldApply);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolvedFlag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolvedFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.variant = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.flagSchema = FlagSchema_StructFlagSchema.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.shouldApply = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolvedFlag {
    return {
      flag: isSet(object.flag) ? globalThis.String(object.flag) : '',
      variant: isSet(object.variant) ? globalThis.String(object.variant) : '',
      value: isObject(object.value) ? object.value : undefined,
      flagSchema: isSet(object.flagSchema) ? FlagSchema_StructFlagSchema.fromJSON(object.flagSchema) : undefined,
      reason: isSet(object.reason) ? resolveReasonFromJSON(object.reason) : 0,
      shouldApply: isSet(object.shouldApply) ? globalThis.Boolean(object.shouldApply) : false,
    };
  },

  toJSON(message: ResolvedFlag): unknown {
    const obj: any = {};
    if (message.flag !== '') {
      obj.flag = message.flag;
    }
    if (message.variant !== '') {
      obj.variant = message.variant;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.flagSchema !== undefined) {
      obj.flagSchema = FlagSchema_StructFlagSchema.toJSON(message.flagSchema);
    }
    if (message.reason !== 0) {
      obj.reason = resolveReasonToJSON(message.reason);
    }
    if (message.shouldApply !== false) {
      obj.shouldApply = message.shouldApply;
    }
    return obj;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin: string[] = [];
    arr.forEach(byte => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === 'string') {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === 'object' && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
